import os
import urllib.parse

from utils.http_tools import HTTPTools
from utils.character_tools import CharacterTools
from utils.file_tools import FileTools
from route import DATA_DIR, PROJECT_ROOT
from config.text_config import *
from config.config import *
import json


# 根据信息收集结果搜寻相关poc,poc数据包放在data/pocs文件夹下方
# 根据使用者选择 -payload参数指定poc数据包
# 设置目标host
# 考虑绕过防护
# 需要json文件表示信息收集结果
# 以及读取data/pocs下方的数据包
# target_file = r"\pocs\cve\2021\41773\CVE-2021-41773.json"
# target_file = ''.join([DATA_DIR,target_file])


# 读取漏洞库文件
def get_vul(target_file):
    try:
        with open(target_file, 'r') as file:
            data = json.load(file)
            return data
    except FileNotFoundError as e:
        print(f"文件 {target_file} 未找到 {e}")
    except json.JSONDecodeError as exc:
        print(f"读取文件 {target_file} 时出现错误: {exc}")
    except Exception as e:
        print(f"读取文件 {target_file} 时发生错误： {e}")


class VulScan:
    def __init__(self, data):
        print(data)
        self.name = data['vulnerability']['name']
        self.type = data['vulnerability']['type']
        self.affected_software = data['vulnerability']['affected_software']
        self.exploit = data['vulnerability']['exploit']
        self.method = self.exploit['method']
        self.variables = self.exploit['variables']
        self.payload = None


    def show_options(self):
        print(self.variables)

    def set_rhost(self, rhost=None):
        if rhost is None:
            self.rhost = self.variables['rhost']
        else:
            self.variables['rhost'] = rhost
            self.rhost = rhost

    def set_rport(self, rport=None):
        if rport is None:
            self.rport = self.variables['rport']
        else:
            self.variables['rport'] = rport
            self.rport = rport
    def set_lhost(self, lhost=None):
        if lhost is None:
            self.lhost = self.variables['lhost']
        else:
            self.variables['lhost'] = lhost
            self.lhost = lhost

    def set_lport(self, lport=None):
        if lport is None:
            self.lport = self.variables['lport']
        else:
            self.variables['lport'] = lport
            self.lport = lport

    def set_values(self, values=None):
        if values is None:
            self.values = self.variables['values']
        else:
            self.variables['values'] = values
            self.values = values
        # print(self.values)

    # 设置payload
    def set_payload(self):
            if self.method == 'command':
                self.payload = self.exploit['exploit_payload'].replace(
                    "{{ variables.value }}", self.values[0]
                ).replace(
                    "{{ variables.rhost }}", self.rhost
                ).replace(
                    "{{ variables.rport }}", self.rport
                )
            elif self.method == 'http':
                self.payload = self.exploit['exploit_payload']
                self.payload['headers']['Host'] = f"{self.rhost}:{self.rport}"
                self.http_method = self.payload['method']
                if self.http_method == 'POST':
                    self.post_data = self.payload['data']
                self.set_http_argv()
                # print(self.payload['path'])

    # 获取报文中的参数
    def set_http_argv(self):
        self.url = CharacterTools.join_strings(["http://", self.rhost,":", self.rport, self.payload['path']])
        self.headers = self.payload['headers']
        self.data = self.payload['body']

    # 攻击运行
    def run(self):
        if self.method == 'command':
            print("即将执行的命令为:", self.payload)
            os.system(self.payload)
        elif self.method == 'http':
            # print(self.url)
            # print(self.headers)
            # print(self.payload)
            if self.http_method != 'POST':
                HTTPTools.send_http_request(url=self.url,headers=self.headers,proxies=proxies)
            else:
                HTTPTools.send_http_request(url=self.url, headers=self.headers,request_data=self.post_data,proxies=proxies,method=self.http_method)
            # pass


def show_vul():
    poc_dic = FileTools.load_index()
    CharacterTools.show(poc_dic)
    return poc_dic

#处理信息收集传来的数据
def handle_message(message_data):
    # message_data = json.loads(message_data)
    url = message_data['URL']
    urls = message_data['URL']
    ports = message_data['Ports']
    ip = message_data['IP']
    host = message_data['HOST']
    os = message_data['OS']
    products = message_data["product"]
    return (url,urls,ports,ip,host,os,products)


#选择对应的poc
def set_poc(poc_dic):
    # CharacterTools.show(poc_dic)
    choice = (input("请选择对应的poc【默认为0】"))
    index = poc_dic.keys()
    if choice not in index:
        choice = "0"
    # print(str(poc_dic[choice]['filename']))
    CharacterTools.show("[*]你选择的poc为:"+ (poc_dic[choice]['filename']))
    return poc_dic[choice]['path']


#主方法
def main(message_data):
    (url,urls,ports,ip,host,os,products) = handle_message(message_data)

    pass

#漏洞利用主方法
def vulscan():
    poc_dict = show_vul()
    target_path = set_poc(poc_dict)
    data = get_vul(target_path)
    vulscan = VulScan(data)
    while True:
        command = input("vulscan > ").strip()
        if command == 'help':
            CharacterTools.show(vulscan_help_text)
        elif command == 'show options':
            vulscan.show_options()
        elif command == 'set rhost':
            rhost = input("rhost ")
            vulscan.set_rhost(rhost)
        elif command == 'set rport':
            rport = input("rport ")
            vulscan.set_rport(rport)
        elif command == 'set values':
            values = []
            value = input("value ")
            values.append(value)
            vulscan.set_values(values)
        elif command == 'set payload':
            vulscan.set_payload()
        elif command == 'run':
            vulscan.run()
        elif command == 'exit':
            CharacterTools.show("退出程序")
            break
        else:
            CharacterTools.show("[-]未指定参数或使用了无效参数，请使用 help 查看可用参数", blue)




if __name__ == "__main__":
    # target_file = r"\pocs\cve\2021\42013\CVE-2021-42013.json"
    # target_file = ''.join([DATA_DIR, target_file])
    # data = get_vul(target_file)
    # print("漏洞信息", data)
    # vulscan = VulScan(data)
    # vulscan.set_rport("8080")
    # vulscan.set_rhost("192.168.52.128")
    # # vulscan.set_values()
    # vulscan.set_payload()
    # vulscan.set_http_argv()
    # vulscan.run()
    # vulscan.show_options()
    # print(vulscan.payload)
    # os.system(vulscan.payload)
    vulscan()
