import os
import urllib.parse

from utils.http_tools import HTTPTools
from utils.character_tools import CharacterTools
from route import DATA_DIR, PROJECT_ROOT
import json


# 根据信息收集结果搜寻相关poc,poc数据包放在data/pocs文件夹下方
# 根据使用者选择 -payload参数指定poc数据包
# 设置目标host
# 考虑绕过防护
# 需要json文件表示信息收集结果
# 以及读取data/pocs下方的数据包
# target_file = r"\pocs\cve\2021\41773\CVE-2021-41773.json"
# target_file = ''.join([DATA_DIR,target_file])


# 读取漏洞库文件
def get_vul(target_file):
    try:
        with open(target_file, 'r') as file:
            data = json.load(file)
            return data
    except FileNotFoundError as e:
        print(f"文件 {target_file} 未找到 {e}")
    except json.JSONDecodeError as exc:
        print(f"读取文件 {target_file} 时出现错误: {exc}")
    except Exception as e:
        print(f"读取文件 {target_file} 时发生错误： {e}")


class VulScan:
    def __init__(self, data):
        self.name = data['vulnerability']['name']
        self.type = data['vulnerability']['type']
        self.affected_software = data['vulnerability']['affected_software']
        self.exploit = data['vulnerability']['exploit']
        self.method = self.exploit['method']
        self.variables = self.exploit['variables']
        self.payload = None

    def show_options(self):
        print(self.variables)

    def set_rhost(self, rhost=None):
        if rhost is None:
            rhost = self.variables['rhost']
        self.rhost = rhost

    def set_rport(self, rport=None):
        if rport is None:
            rport = self.variables['rport']
        self.rport = rport

    def set_values(self, values=None):
        if values is None:
            values = self.variables['values']
        self.values = values

    # 设置payload
    def set_payload(self):
        print(self.rhost)
        if self.method == 'command':
            self.payload = self.exploit['exploit_payload'].replace(
                "{{ variables.value }}", self.values[0]
            ).replace(
                "{{ variables.rhost }}", self.rhost
            ).replace(
                "{{ variables.rport }}", self.rport
            )
        elif self.method == 'http':
            self.payload = self.exploit['exploit_payload']
            self.payload['headers']['Host'] = f"{self.rhost}:{self.rport}"
            self.http_method = self.payload['method']
            # print(self.payload['path'])

    # 获取报文中的参数
    def set_http_argv(self):
        self.url = CharacterTools.join_strings(["http://", self.rhost,":", self.rport, self.payload['path']])
        self.headers = self.payload['headers']
        self.data = self.payload['body']

    # 攻击运行
    def run(self):
        if self.method == 'command':
            print("即将执行的命令为:", self.payload)
            os.system(self.payload)
        elif self.method == 'http':
            # print(self.url)
            # print(self.headers)
            # print(self.payload)
            HTTPTools.send_http_request(url=self.url,headers=self.headers,proxies="127.0.0.1:8080")
            # pass


if __name__ == "__main__":
    target_file = r"\pocs\cve\2021\42013\CVE-2021-42013.json"
    target_file = ''.join([DATA_DIR, target_file])
    data = get_vul(target_file)
    print("漏洞信息", data)
    vulscan = VulScan(data)
    vulscan.set_rport("8080")
    vulscan.set_rhost("192.168.52.128")
    # vulscan.set_values()
    vulscan.set_payload()
    vulscan.set_http_argv()
    vulscan.run()
    # vulscan.show_options()
    # print(vulscan.payload)
    # os.system(vulscan.payload)
